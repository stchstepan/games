import pygame
from pygame.sprite import Sprite #класс Sprite нужен чтобы сгруппировать все связанные элементы в
#игре и выполнять операции со всеми сгруппированными элементами одновременно
import random

class Bullet(Sprite): #создаем класс-потомок, который наследует методы родительского класса
    """Класс для управления снарядами, выпущенными кораблем"""

    def __init__(self, ai_game): #передаем в класс ссылку self и текущий экземпляр игры
        """Создает объект снарядов в текущей позиции корабля"""
        super().__init__() #инициализируем все методы родительского класса

        self.screen = ai_game.screen #присваеваем экрану, на котором будет находиться изображение,
        #настройки экрана (которые хранятся в переменной SCREEN) текущего экземпляра класса AlienInvasion

        self.settings = ai_game.settings #создается атрибут settings (экземпляр класса Settings, 
        #используемый в текущем экземпляре класса AlienInvasion)

        self.color = self.settings.bullet_color #инициализируем цвет пули, который хранится в отдельном 
        #модуле с настройками (Settings)

        self.rect = pygame.Rect(0, 0, self.settings.bullet_width, #создание снаряда в позиции (0,0).
            self.settings.bullet_height) #Снаряд создается не на основе готового изображения, а
            #строится с нуля, поэтому мы используем класс Rect из PyGame. При создании прямоугольника
            #(снаряда) нам нужно указать координаты левого верхнего угла (0, 0), его ширину и высоту.
            #Прямоугольник инициализируется в указанных координатах (0,0), но затем перемещается в 
            #соответсвии с коаблем. Ширина и высота определяется переменной self.settings

        self.rect.midtop = ai_game.ship.rect.midtop #назначение правильной позиции (в середине прямоугольника),
        #описывающего корабль

        self.y = float(self.rect.y) #позиция снаряда хранится в вещественном формате

    def update(self):
        """Перемещает снаряд вверх по экрану"""

        self.y -= self.settings.bullet_speed_factor #обновление позиции снаряда в вещественном формате

        self.rect.y = self.y #обновление позиции прямоугольника, описывающего снаряд

    def draw_bullet(self):
        """Выводит снаряд на экран"""
        pygame.draw.rect(self.screen, self.color, self.rect) #тут уже не строим (как это делали с готовым 
        #изображением), а РИСУЕМ полученный объект. В фу-ю для построения передаем экран (self.screen),
        #на котором будет отрисованна пуля (на котором будет закрашена часть пространства), которая
        #определяется цветом (self.color) и прямоугольнико (self.rect). В ДАННОМ СЛУЧАЕ rect - ЭТО НЕ 
        #ОПИСЫВАЮЩИЙ ПРЯМОУГОЛЬНИК, А САМ ОБЪЕКТ, КОТОРЫЙ МЫ ОТРИСОВЫВАЕМ

class AlienBullet(Sprite):
    """Класс для управления снарядами, выпущенными НЛО"""

    def __init__(self, ai_game): #передаем в класс ссылку self и текущий экземпляр игры
        """Создает объект снарядов в текущей позиции корабля"""
        super().__init__() #инициализируем все методы родительского класса

        self.screen = ai_game.screen #присваеваем экрану, на котором будет находиться изображение,
        #настройки экрана (которые хранятся в переменной SCREEN) текущего экземпляра класса AlienInvasion

        self.settings = ai_game.settings #создается атрибут settings (экземпляр класса Settings, 
        #используемый в текущем экземпляре класса AlienInvasion)

        self.color = self.settings.bullet_color #инициализируем цвет пули, который хранится в отдельном 
        #модуле с настройками (Settings)

        self.rect = pygame.Rect(0, 0, self.settings.bullet_width, #создание снаряда в позиции (0,0).
            self.settings.bullet_height) #Снаряд создается не на основе готового изображения, а
            #строится с нуля, поэтому мы используем класс Rect из PyGame. При создании прямоугольника
            #(снаряда) нам нужно указать координаты левого верхнего угла (0, 0), его ширину и высоту.
            #Прямоугольник инициализируется в указанных координатах (0,0), но затем перемещается в 
            #соответсвии с коаблем. Ширина и высота определяется переменной self.settings

        shooting_aliens = [] #пустой список, куда добавляется каждый из созданных НЛО

        for alien in ai_game.aliens.sprites(): #перебор всех созданных НЛО
            shooting_aliens.append(alien) #добавление в пустой список
            alien = random.choice(shooting_aliens) #выбор случайного НЛО, от которого будет лететь пуля
            
        self.rect.centerx = alien.rect.centerx
        self.rect.bottom = alien.rect.bottom

        self.y = float(self.rect.y)

    def update(self):
        """Перемещает снаряд вверх по экрану"""

        self.y += self.settings.bullet_speed_factor #обновление позиции снаряда в вещественном формате

        self.rect.y = self.y #обновление позиции прямоугольника, описывающего снаряд

    def draw_bullet(self):
        """Выводит снаряд на экран"""
        pygame.draw.rect(self.screen, self.color, self.rect) #тут уже не строим (как это делали с готовым 
        #изображением), а РИСУЕМ полученный объект. В фу-ю для построения передаем экран (self.screen),
        #на котором будет отрисованна пуля (на котором будет закрашена часть пространства), которая
        #определяется цветом (self.color) и прямоугольнико (self.rect). В ДАННОМ СЛУЧАЕ rect - ЭТО НЕ 
        #ОПИСЫВАЮЩИЙ ПРЯМОУГОЛЬНИК, А САМ ОБЪЕКТ, КОТОРЫЙ МЫ ОТРИСОВЫВАЕМ